import tkinter as tk
from tkinter import Label, Entry, Button, Checkbutton, BooleanVar
import threading
import time
import os

from db import get_user, save_user, load_user_name_by_id
from face_register import register_face
from encode_faces import encode_faces_for
from face_recog import recognize_face
from config import LOG_DIR
from PIL import Image, ImageTk
import cv2

def cv2_to_tk(frame):
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    img = Image.fromarray(frame_rgb)
    imgtk = ImageTk.PhotoImage(image=img)
    return imgtk

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("얼굴 인식 출석 시스템")
        self.geometry("600x480")

        self.cap = None
        self.current_user_id = None
        self.current_user_is_admin = False

        self.frames = {}
        for F in (LoginFrame, RegisterFrame, FaceRecognitionFrame,
                  AttendanceFrame, AdminAttendanceFrame, AttendanceResultFrame):
            frame = F(parent=self, controller=self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(LoginFrame)
        self.protocol("WM_DELETE_WINDOW", self.on_close)

    def show_frame(self, frame_class):
        frame = self.frames[frame_class]
        frame.tkraise()
        if hasattr(frame, 'reset'):
            frame.reset()

    def open_camera(self):
        if self.cap is None or not self.cap.isOpened():
            self.cap = cv2.VideoCapture(0)
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    def close_camera(self):
        if self.cap:
            self.cap.release()
            self.cap = None

    def on_close(self):
        self.close_camera()
        self.destroy()

class LoginFrame(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        Label(self, text="로그인", font=("Arial", 16)).pack(pady=10)
        Label(self, text="아이디").pack()
        self.entry_user_id = Entry(self)
        self.entry_user_id.pack()

        Label(self, text="비밀번호").pack()
        self.entry_password = Entry(self, show="*")
        self.entry_password.pack()

        self.status_label = Label(self, text="")
        self.status_label.pack(pady=10)

        Button(self, text="로그인", command=self.login).pack(pady=5)
        Button(self, text="회원가입", command=lambda: controller.show_frame(RegisterFrame)).pack(pady=5)

    def login(self):
        user_id = self.entry_user_id.get()
        password = self.entry_password.get()
        user = get_user(user_id, password)

        if user:
            self.status_label.config(text=f"{user['name']}님 환영합니다.", fg="green")
            self.controller.current_user_id = user['student_id']
            self.controller.current_user_is_admin = str(user['is_admin']).lower() == 'true'
            self.controller.show_frame(FaceRecognitionFrame)
        else:
            self.status_label.config(text="아이디 또는 비밀번호가 올바르지 않습니다.", fg="red")

    def reset(self):
        self.entry_user_id.delete(0, tk.END)
        self.entry_password.delete(0, tk.END)
        self.status_label.config(text="")

class RegisterFrame(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        Label(self, text="사용자 등록", font=("Arial", 16)).pack(pady=10)
        form_frame = tk.Frame(self)
        form_frame.pack(pady=10)

        Label(form_frame, text="아이디").grid(row=0, column=0, sticky="e")
        Label(form_frame, text="비밀번호").grid(row=1, column=0, sticky="e")
        Label(form_frame, text="학번").grid(row=2, column=0, sticky="e")
        Label(form_frame, text="이름").grid(row=3, column=0, sticky="e")

        self.entry_user_id = Entry(form_frame)
        self.entry_password = Entry(form_frame, show="*")
        self.entry_student_id = Entry(form_frame)
        self.entry_name = Entry(form_frame)

        self.entry_user_id.grid(row=0, column=1)
        self.entry_password.grid(row=1, column=1)
        self.entry_student_id.grid(row=2, column=1)
        self.entry_name.grid(row=3, column=1)

        self.var_is_admin = BooleanVar()
        Checkbutton(self, text="관리자", variable=self.var_is_admin).pack()

        self.status_label = Label(self, text="")
        self.status_label.pack(pady=10)

        Button(self, text="등록", command=self.submit).pack(pady=10)
        Button(self, text="로그인 화면으로", command=lambda: controller.show_frame(LoginFrame)).pack()

    def submit(self):
        user_id = self.entry_user_id.get()
        password = self.entry_password.get()
        student_id = self.entry_student_id.get()
        name = self.entry_name.get()
        is_admin = self.var_is_admin.get()

        if not all([user_id, password, student_id, name]):
            self.status_label.config(text="모든 항목을 입력해주세요.", fg="red")
            return

        save_user(user_id, password, name, student_id, is_admin)
        self.status_label.config(text="얼굴 사진 촬영 중입니다. 잠시만 기다려주세요...", fg="blue")

        threading.Thread(target=self.capture_and_encode, args=(student_id,)).start()

    def capture_and_encode(self, student_id):
        self.controller.open_camera()
        success = register_face(student_id, self.controller.cap)
        if success:
            self.controller.current_user_id = student_id
            encode_faces_for(student_id)
            self.status_label.config(text="얼굴 등록 완료!", fg="green")
            self.controller.after(1000, lambda: self.controller.show_frame(LoginFrame))
        else:
            self.status_label.config(text="등록 실패: 얼굴 사진을 충분히 찍지 못했습니다.", fg="red")
        self.controller.close_camera()

    def reset(self):
        self.entry_user_id.delete(0, tk.END)
        self.entry_password.delete(0, tk.END)
        self.entry_student_id.delete(0, tk.END)
        self.entry_name.delete(0, tk.END)
        self.var_is_admin.set(False)
        self.status_label.config(text="")

class FaceRecognitionFrame(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        Label(self, text="얼굴 인식 중...", font=("Arial", 16)).pack(pady=10)
        self.status_label = Label(self, text="얼굴 인식을 진행해주세요.")
        self.status_label.pack(pady=10)

        self.video_label = tk.Label(self)
        self.video_label.pack(pady=10)

        self.btn_recognize = Button(self, text="얼굴 인식 시작", command=self.recognize)
        self.btn_recognize.pack(pady=10)

        self.btn_logout = Button(self, text="로그아웃", command=self.logout)
        self.btn_logout.pack()

    def recognize(self):
        def run_recognition():
            self.controller.open_camera()
            user = recognize_face(self.controller.current_user_id, self.controller.cap)
            self.controller.close_camera()
            self.after(0, self.process_result, user)

        threading.Thread(target=run_recognition).start()
        self.status_label.config(text="얼굴 인식 중입니다...", fg="blue")
        self.btn_recognize.config(state="disabled")

    def process_result(self, user):
        self.btn_recognize.config(state="normal")
        if user:
            self.status_label.config(text=f"{user}님 얼굴 인증 성공!", fg="green")
            if self.controller.current_user_is_admin:
                self.after(1000, lambda: self.controller.show_frame(AdminAttendanceFrame))
            else:
                result_frame = self.controller.frames[AttendanceResultFrame]
                result_frame.set_result(self.controller.current_user_id, user)
                self.after(1000, lambda: self.controller.show_frame(AttendanceResultFrame))
        else:
            self.status_label.config(text="출석 실패. 얼굴 인증에 실패했습니다.", fg="red")

    def logout(self):
        self.controller.current_user_id = None
        self.controller.current_user_is_admin = False
        self.controller.show_frame(LoginFrame)

    def reset(self):
        self.btn_recognize.config(state="normal")
        self.status_label.config(text="얼굴 인식을 진행해주세요.")

class AttendanceFrame(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        Label(self, text="출석 확인", font=("Arial", 16)).pack(pady=10)
        self.status_label = Label(self, text="", fg="blue", font=("Arial", 12))
        self.status_label.pack(pady=10)

        Button(self, text="출석 시작", command=self.recognize).pack(pady=10)
        Button(self, text="로그아웃", command=self.logout).pack()

        from tkinter import scrolledtext
        self.log_box = scrolledtext.ScrolledText(self, width=70, height=10, state='disabled')
        self.log_box.pack(pady=10)

    def log(self, message, color="black"):
        self.log_box.config(state='normal')
        self.log_box.insert(tk.END, f"{message}\n")
        self.log_box.see(tk.END)
        self.log_box.config(state='disabled')
        self.status_label.config(text=message, fg=color)

    def recognize(self):
        def run_recognition():
            self.controller.open_camera()
            self.log("[INFO] 얼굴 인식 시도 중...", "blue")
            user = recognize_face(self.controller.current_user_id, self.controller.cap)
            self.controller.close_camera()
            self.after(0, self.process_result, user)

        threading.Thread(target=run_recognition).start()
        self.status_label.config(text="얼굴 인식 중입니다...", fg="blue")

    def process_result(self, user):
        if user:
            self.log(f"{user}님 출석 확인 완료", "green")
        else:
            self.log("출석 실패", "red")

    def logout(self):
        self.controller.current_user_id = None
        self.controller.current_user_is_admin = False
        self.controller.show_frame(LoginFrame)

    def reset(self):
        self.log_box.config(state='normal')
        self.log_box.delete('1.0', tk.END)
        self.log_box.config(state='disabled')
        self.status_label.config(text="")

class AdminAttendanceFrame(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        Label(self, text="관리자 출석 로그", font=("Arial", 16)).pack(pady=10)

        from tkinter import scrolledtext
        self.log_box = scrolledtext.ScrolledText(self, width=70, height=20, state='disabled')
        self.log_box.pack(pady=10)

        Button(self, text="로그아웃", command=self.logout).pack(pady=5)
        Button(self, text="새로고침", command=self.load_logs).pack(pady=5)

    def logout(self):
        self.controller.current_user_id = None
        self.controller.current_user_is_admin = False
        self.controller.show_frame(LoginFrame)

    def load_logs(self):
        self.log_box.config(state='normal')
        self.log_box.delete('1.0', tk.END)
        if not os.path.exists(LOG_DIR):
            self.log_box.insert(tk.END, "출석 로그가 존재하지 않습니다.\n")
        else:
            for fname in sorted(os.listdir(LOG_DIR)):
                path = os.path.join(LOG_DIR, fname)
                with open(path, "r", encoding="utf-8") as f:
                    self.log_box.insert(tk.END, f.read() + "\n")
        self.log_box.config(state='disabled')

    def reset(self):
        self.load_logs()

class AttendanceResultFrame(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.label = Label(self, text="", font=("Arial", 16))
        self.label.pack(pady=20)
        Button(self, text="돌아가기", command=lambda: controller.show_frame(FaceRecognitionFrame)).pack()

    def set_result(self, student_id, name):
        self.label.config(text=f"{name}님 출석 완료")

    def reset(self):
        self.label.config(text="")

if __name__ == "__main__":
    app = App()
    app.mainloop()
